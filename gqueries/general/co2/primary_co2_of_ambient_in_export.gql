# CO2 of carrier group 'ambient' for the export converter group

- unit = tonne
- query =
    SUM(
        IF(V(G(energy_export).select {|node| node.input_slots.detect { |slot| slot.carrier.ambient_heat? }}, primary_demand) > 0.0,
            V(G(energy_export).select {|node| node.input_slots.detect { |slot| slot.carrier.ambient_heat? }}, "ambient_heat_input_conversion * primary_co2_emission * (1.0 - demand / primary_demand)"),
            0.0),
        IF(V(G(energy_export).select {|node| node.input_slots.detect { |slot| slot.carrier.ambient_cold? }}, primary_demand) > 0.0,
            V(G(energy_export).select {|node| node.input_slots.detect { |slot| slot.carrier.ambient_cold? }}, "ambient_cold_input_conversion * primary_co2_emission * (1.0 - demand / primary_demand)"),
            0.0),
        IF(V(G(energy_export).select {|node| node.input_slots.detect { |slot| slot.carrier.wind? }}, primary_demand) > 0.0,
            V(G(energy_export).select {|node| node.input_slots.detect { |slot| slot.carrier.wind? }}, "wind_input_conversion * primary_co2_emission * (1.0 - demand / primary_demand)"),
            0.0),
        IF(V(G(energy_export).select {|node| node.input_slots.detect { |slot| slot.carrier.water? }}, primary_demand) > 0.0,
            V(G(energy_export).select {|node| node.input_slots.detect { |slot| slot.carrier.water? }}, "water_input_conversion * primary_co2_emission * (1.0 - demand / primary_demand)"),
            0.0)
    ) / THOUSANDS
