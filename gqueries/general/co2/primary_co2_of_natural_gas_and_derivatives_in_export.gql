# CO2 of carrier group 'natural_gas_and_derivatives' for the export converter group

- unit = tonne
- query =
    SUM(
        IF(V(G(energy_export).select {|node| node.input_slots.detect { |slot| slot.carrier.natural_gas? }}, primary_demand) > 0.0,
            V(G(energy_export).select {|node| node.input_slots.detect { |slot| slot.carrier.natural_gas? }}, "natural_gas_input_conversion * primary_co2_emission * (1.0 - demand / primary_demand)"),
            0.0),
        IF(V(G(energy_export).select {|node| node.input_slots.detect { |slot| slot.carrier.lng? }}, primary_demand) > 0.0,
            V(G(energy_export).select {|node| node.input_slots.detect { |slot| slot.carrier.lng? }}, "lng_input_conversion * primary_co2_emission * (1.0 - demand / primary_demand)"),
            0.0),
        IF(V(G(energy_export).select {|node| node.input_slots.detect { |slot| slot.carrier.network_gas? }}, primary_demand) > 0.0,
            V(G(energy_export).select {|node| node.input_slots.detect { |slot| slot.carrier.network_gas? }}, "network_gas_input_conversion * primary_co2_emission * (1.0 - demand / primary_demand)"),
            0.0),
        IF(V(G(energy_export).select {|node| node.input_slots.detect { |slot| slot.carrier.gas_power_fuelmix? }}, primary_demand) > 0.0,
            V(G(energy_export).select {|node| node.input_slots.detect { |slot| slot.carrier.gas_power_fuelmix? }}, "gas_power_fuelmix_input_conversion * primary_co2_emission * (1.0 - demand / primary_demand)"),
            0.0),
        IF(V(G(energy_export).select {|node| node.input_slots.detect { |slot| slot.carrier.compressed_network_gas? }}, primary_demand) > 0.0,
            V(G(energy_export).select {|node| node.input_slots.detect { |slot| slot.carrier.compressed_network_gas? }}, "compressed_network_gas_input_conversion * primary_co2_emission * (1.0 - demand / primary_demand)"),
            0.0)
    ) / THOUSANDS
