# CO2 of carrier group 'oil_and_derivatives' for the export converter group

- unit = tonne
- query =
    SUM(
        IF(V(G(energy_export).select {|node| node.input_slots.detect { |slot| slot.carrier.crude_oil? }}, primary_demand) > 0.0,
            V(G(energy_export).select {|node| node.input_slots.detect { |slot| slot.carrier.crude_oil? }}, "crude_oil_input_conversion * primary_co2_emission * (1.0 - demand / primary_demand)"),
            0.0),
        IF(V(G(energy_export).select {|node| node.input_slots.detect { |slot| slot.carrier.gasoline? }}, primary_demand) > 0.0,
            V(G(energy_export).select {|node| node.input_slots.detect { |slot| slot.carrier.gasoline? }}, "gasoline_input_conversion * primary_co2_emission * (1.0 - demand / primary_demand)"),
            0.0),
        IF(V(G(energy_export).select {|node| node.input_slots.detect { |slot| slot.carrier.diesel? }}, primary_demand) > 0.0,
            V(G(energy_export).select {|node| node.input_slots.detect { |slot| slot.carrier.diesel? }}, "diesel_input_conversion * primary_co2_emission * (1.0 - demand / primary_demand)"),
            0.0),
        IF(V(G(energy_export).select {|node| node.input_slots.detect { |slot| slot.carrier.lpg? }}, primary_demand) > 0.0,
            V(G(energy_export).select {|node| node.input_slots.detect { |slot| slot.carrier.lpg? }}, "lpg_input_conversion * primary_co2_emission * (1.0 - demand / primary_demand)"),
            0.0),
        IF(V(G(energy_export).select {|node| node.input_slots.detect { |slot| slot.carrier.kerosene? }}, primary_demand) > 0.0,
            V(G(energy_export).select {|node| node.input_slots.detect { |slot| slot.carrier.kerosene? }}, "kerosene_input_conversion * primary_co2_emission * (1.0 - demand / primary_demand)"),
            0.0),
        IF(V(G(energy_export).select {|node| node.input_slots.detect { |slot| slot.carrier.heavy_fuel_oil? }}, primary_demand) > 0.0,
            V(G(energy_export).select {|node| node.input_slots.detect { |slot| slot.carrier.heavy_fuel_oil? }}, "heavy_fuel_oil_input_conversion * primary_co2_emission * (1.0 - demand / primary_demand)"),
            0.0)
    ) / THOUSANDS
